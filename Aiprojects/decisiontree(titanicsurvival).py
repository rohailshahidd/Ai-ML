# -*- coding: utf-8 -*-
"""DecisionTree(TitanicSurvival).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Wxekv8XGD-dM2xPMBcFWKtzvaKyt57vs
"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report
from sklearn import tree
import matplotlib.pyplot as plt

data = pd.read_csv('titanic.csv')
data

# Drop unnecessary columns
tdata = data.drop(['PassengerId', 'Name', 'Ticket', 'Cabin'], axis=1)

# Handle missing values
tdata['Age'].fillna(tdata['Age'].mean(), inplace=True)
tdata['Embarked'].fillna(tdata['Embarked'].mode()[0], inplace=True)

# Convert categorical variables into dummy/indicator variables
tdata = pd.get_dummies(tdata, columns=['Sex', 'Embarked'], drop_first=True)

# Define feature variables (X) and target variable (y)
X = tdata.drop('Survived', axis=1)
y = tdata['Survived']

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Initialize the Decision Tree Classifier
clf = DecisionTreeClassifier(criterion='entropy', random_state=42)

# Train the model
clf.fit(X_train, y_train)

# Make predictions on the testing set
y_pred = clf.predict(X_test)

# Calculate the accuracy
accuracy = accuracy_score(y_test, y_pred)
print(f'Accuracy: {accuracy:.2f}')

# Display the confusion matrix
print('Confusion Matrix:')
print(confusion_matrix(y_test, y_pred))

# Display the classification report
print('Classification Report:')
print(classification_report(y_test, y_pred))

# Plot the decision tree
plt.figure(figsize=(20,10))
tree.plot_tree(clf, filled=True, feature_names=X.columns, class_names=['Not Survived', 'Survived'])
plt.show()

