# -*- coding: utf-8 -*-
"""Untitled9.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1oVUkxpF3d_ygmgTacGQ1v9kxxeJeJY8E
"""

import pandas as pd

data = pd.read_csv('/pizza_v2.csv')
data

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
import matplotlib.pyplot as plt
import re

# Optionally, for better visualization
import seaborn as sns
sns.set()

def convert_to_float(value):
    if isinstance(value, str):
        return float(value.split()[0])
    return float(value)

def convert_price(value):
    if isinstance(value, str):
        # Remove currency symbols and commas
        value = re.sub(r'[^\d.]', '', value)
    return float(value)

# Apply the function to the diameter column
data['diameter'] = data['diameter'].apply(convert_to_float)
data['price_rupiah'] = data['price_rupiah'].apply(convert_price)

# Select the feature (independent variable) and the target (dependent variable)
X = data[['diameter']]
y = data['price_rupiah']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a linear regression model
model = LinearRegression()

# Fit the model on the training data
model.fit(X_train, y_train)

# Predict prices using the test set
y_pred = model.predict(X_test)

# Plot the training data
plt.scatter(X_train, y_train, color='blue', label='Training data')

# Plot the test data
plt.scatter(X_test, y_test, color='green', label='Test data')

# Plot the regression line
plt.plot(X_test, y_pred, color='red', linewidth=2, label='Regression line')

# Add labels and title
plt.xlabel('Diameter')
plt.ylabel('Price')
plt.title('Linear Regression: Price vs. Diameter')
plt.legend()

# Show the plot
plt.show()

"""Simple Linear Regression thus the large mean squared error, If I use more features to predict the price then it'll become a multiple linear regression model."""

from sklearn.metrics import mean_squared_error, r2_score

# Calculate the Mean Squared Error (MSE)
mse = mean_squared_error(y_test, y_pred)
print(f'Mean Squared Error: {mse}')

# Calculate the R-squared value
r2 = r2_score(y_test, y_pred)
print(f'R-squared: {r2}')